{"version":3,"sources":["Components/BandsChart.js","Context/SocketContext.js","Components/BandList.js","Components/NewBand.js","HomePage.js","App.js","hooks/useSockets.js","index.js"],"names":["myChart","SocketContext","createContext","BandList","useState","bands","setBands","editname","setEditname","socket","useContext","useEffect","on","data","off","className","onClick","map","band","id","emit","type","value","name","onChange","e","target","changeName","votes","Chart","register","registerables","BandsChart","console","log","createChart","ctx","document","getElementById","destroy","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","animation","indexAxis","NewBand","setValue","handleSubmit","preventDefault","onSubmit","placeholder","HomePage","online","App","setOnline","serverPath","process","baseURL","useMemo","io","connect","transports","connected","useSockets","Provider","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5f564fab.chunk.js","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\r\nimport { Chart, registerables } from 'chart.js';\r\nimport { SocketContext } from '../Context/SocketContext';\r\nChart.register(...registerables);\r\nlet myChart;\r\n\r\nexport const BandsChart = () => {\r\n\r\n    const {socket} = useContext(  SocketContext );\r\n\r\n    console.log(\"Start\")\r\n\r\n    useEffect(() => {\r\n\r\n        console.log(\"Evento!\")\r\n        \r\n        socket.on(\"GetBands\", (data) => {\r\n            createChart(  data  );\r\n        })\r\n        \r\n    }, [socket]);\r\n\r\n    const createChart = (   bands  =  [] ) => {\r\n\r\n        const ctx = document.getElementById('myChart');\r\n        if (typeof myChart !== \"undefined\") myChart.destroy();\r\n        console.log(\"destroy\")\r\n        myChart =    new Chart(ctx, {\r\n            type: 'bar',\r\n            data: {\r\n                labels: bands.map( band => band.name ),\r\n                datasets: [{\r\n                    label: '# of Votes',\r\n                    data: bands.map( band => band.votes ),\r\n                    backgroundColor: [\r\n                        'rgba(255, 99, 132, 0.2)',\r\n                        'rgba(54, 162, 235, 0.2)',\r\n                        'rgba(255, 206, 86, 0.2)',\r\n                        'rgba(75, 192, 192, 0.2)',\r\n                        'rgba(153, 102, 255, 0.2)',\r\n                        'rgba(255, 159, 64, 0.2)'\r\n                    ],\r\n                    borderColor: [\r\n                        'rgba(255, 99, 132, 1)',\r\n                        'rgba(54, 162, 235, 1)',\r\n                        'rgba(255, 206, 86, 1)',\r\n                        'rgba(75, 192, 192, 1)',\r\n                        'rgba(153, 102, 255, 1)',\r\n                        'rgba(255, 159, 64, 1)'\r\n                    ],\r\n                    borderWidth: 1\r\n                }]\r\n            },\r\n            options: {\r\n                animation: false,\r\n                indexAxis: 'y',\r\n        }});\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <canvas id=\"myChart\" ></canvas>\r\n        </>\r\n    )\r\n}\r\n","import { createContext } from \"react\";\r\n\r\nexport const SocketContext = createContext();\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { SocketContext } from '../Context/SocketContext';\r\n\r\nexport const BandList = () => {\r\n\r\n    const [bands, setBands] = useState([]);\r\n    const [editname, setEditname] = useState(false);\r\n    const { socket  } = useContext(  SocketContext );\r\n\r\n    \r\n    useEffect(() => {\r\n\r\n        socket.on(\"GetBands\", (data) => {\r\n            setBands(  data  );\r\n        }) \r\n\r\n        return () => socket.off(\"GetBands\");\r\n        \r\n    }, [socket]);\r\n\r\n\r\n\r\n    \r\n    const IncreaseVotes = (id) => {\r\n        socket.emit(\"IncreaseVotes\", id );\r\n    };\r\n\r\n    const DeleteBand = (id) => {\r\n        socket.emit(\"DeleteBand\", id );\r\n    };\r\n\r\n    const changeName = (e, id) => {\r\n        const name = e.target.value;\r\n        \r\n        setBands(bands.map( band => {\r\n\r\n\r\n            if(band.id === id)\r\n            {\r\n                band.name = name;\r\n            }\r\n            \r\n            return band;\r\n        }))\r\n\r\n        socket.emit(\"ChangeNameBand\", {\r\n            id,\r\n            name\r\n        } );\r\n    }\r\n\r\n\r\n\r\n\r\n    const newRow = () => {\r\n\r\n       return bands.map(band =>{\r\n           \r\n            return (<tbody key={band.id}>\r\n                <tr>\r\n                    <td>\r\n                        <button \r\n                            className=\"btn btn-primary\"\r\n                            onClick={() => IncreaseVotes(band.id)}\r\n                        >+1</button>\r\n                    </td>\r\n                    <td>\r\n                        {\r\n                            (editname)\r\n                            ?\r\n                            (<input \r\n                                type=\"form-control\" \r\n                                value={band.name}\r\n                                onChange={  e => changeName( e , band.id  )}\r\n                            />)\r\n                            :\r\n                            (<h4>\r\n                                {\r\n                                    band.name\r\n                                }\r\n                            </h4>)\r\n                        }\r\n                            \r\n                        \r\n                    </td>\r\n                    <td>\r\n                        <h3>\r\n                            {band.votes}\r\n                        </h3>\r\n                    </td>\r\n                    <td>\r\n                        <button \r\n                            className=\"btn btn-danger\"\r\n                            onClick={() => DeleteBand(band.id)}\r\n                        >\r\n                            Borrar\r\n                        </button>\r\n                    </td>\r\n                </tr>\r\n            </tbody>)\r\n\r\n        })\r\n\r\n        \r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"d-flex justify-content-around\">\r\n                <h4>   Lista de Bandas  </h4>\r\n                \r\n                {\r\n                    (editname)\r\n                    ?\r\n                    (<button \r\n                        className=\"btn btn-success\"\r\n                        onClick={() => setEditname(false)}\r\n                    >\r\n                        OK\r\n                    </button>)\r\n                    :\r\n                    (<button \r\n                        className=\"btn btn-primary\"\r\n                        onClick={() => setEditname(true)}\r\n                    >\r\n                        Editar nombre\r\n                    </button>)\r\n                }\r\n                \r\n\r\n            </div>\r\n\r\n            <table className=\"table table-stripped\">\r\n                <thead>\r\n                    <tr>\r\n                        <th></th>\r\n                        <th>Nombre</th>\r\n                        <th>Votos</th>\r\n                        <th>Borrar</th>\r\n                    </tr>\r\n                </thead>\r\n                {\r\n                    newRow()\r\n                }\r\n            </table>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React, { useContext, useState } from 'react'\r\nimport { SocketContext } from '../Context/SocketContext';\r\n\r\nexport const NewBand = () => {\r\n\r\n    const [value, setValue] = useState(\"\");\r\n    const {socket} = useContext(  SocketContext );\r\n\r\n    const handleSubmit = (e) => {\r\n\r\n        e.preventDefault();\r\n        socket.emit(\"NewBand\", value);\r\n        setValue(\"\");\r\n        \r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <h4>   Nueva Banda  </h4>\r\n            \r\n            <form className=\"mt-4\" onSubmit={  handleSubmit  }>\r\n                <input \r\n                    type=\"text\" \r\n                    className=\"form-control\" \r\n                    placeholder=\"Ingrese nombre de banda\"\r\n                    value={  value   }\r\n                    onChange={ e => setValue(e.target.value) }\r\n                />\r\n\r\n                <button \r\n                    className=\"btn btn-primary mt-2\" \r\n                    onClick={  handleSubmit   }\r\n                >\r\n                    Enviar\r\n                </button>\r\n\r\n            </form>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React, { useContext  } from 'react';\r\nimport { BandList } from './Components/BandList';\r\nimport { BandsChart } from './Components/BandsChart';\r\nimport { NewBand } from './Components/NewBand';\r\nimport { SocketContext } from './Context/SocketContext';\r\n\r\nexport const HomePage = () => {\r\n\r\n    const {online} = useContext(  SocketContext );\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            \r\n            <div className=\"d-inline-flex alert\">\r\n                <h6>\r\n                    Service Status: \r\n                    {\r\n                        (online)\r\n                        ?   <span className=\"text-success\">  Online  </span> \r\n                        :   <span className=\"text-danger\">  Offline  </span>\r\n                    }\r\n                </h6>\r\n            </div>\r\n\r\n            <h1>BandNames   App</h1>\r\n            <hr/>\r\n\r\n            <div className=\"row\">\r\n                <div  className=\"col-7\">\r\n                        <BandsChart  />\r\n                </div>\r\n            </div>\r\n\r\n            <hr/>\r\n\r\n            <div className=\"row\">\r\n                <div  className=\"col-7\">\r\n                    <BandList  />\r\n                </div>\r\n\r\n                <div  className=\"col-4\">\r\n                    <NewBand />\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { SocketContext } from './Context/SocketContext'\r\nimport { HomePage } from './HomePage'\r\nimport { useSockets } from './hooks/useSockets';\r\n\r\nexport const App = () => {\r\n\r\n    const {online,socket} = useSockets();\r\n    \r\n    return (\r\n        <SocketContext.Provider value={   {online, socket}   }>\r\n\r\n            <HomePage />\r\n\r\n        </SocketContext.Provider>\r\n\r\n    )\r\n}\r\n","\r\nimport { useEffect, useMemo, useState } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\n\r\nexport const useSockets = () => {\r\n\r\n    const [online, setOnline] = useState(false);\r\n\r\n    const serverPath = process.env.baseURL;\r\n\r\n    const socket = useMemo(() => {\r\n        \r\n        return io.connect(serverPath, {\r\n            transports: [\"websocket\"]\r\n        })\r\n    }, \r\n    [serverPath]);\r\n\r\n    useEffect(() => {\r\n        setOnline(socket.connected);\r\n\r\n    }, [socket]);\r\n\r\n    useEffect(() => {\r\n\r\n        socket.on(\"connect\", () => {\r\n            setOnline(  true  );\r\n        })\r\n        \r\n    }, [socket]);\r\n\r\n    useEffect(() => {\r\n\r\n        socket.on(\"disconnect\", () => {\r\n            setOnline(  false  );\r\n        })\r\n        \r\n    }, [socket]);\r\n    \r\n    \r\n    return  {\r\n        socket,\r\n        online\r\n    };\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n     <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}